#
# JBZoo Toolbox - Csv-Blueprint.
#
# This file is part of the JBZoo Toolbox project.
# For the full copyright and license information, please view the LICENSE
# file that was distributed with this source code.
#
# @license    MIT
# @copyright  Copyright (C) JBZoo.com, All rights reserved.
# @see        https://github.com/JBZoo/Csv-Blueprint
#

# File contains just ideas. It's invalid!

# Include another schemas
includes: # Alias is always required
  - /path/schema_1.yml   as alias_1 # Full path to another schema.
  - ./path/schema_2.yml  as alias_2 # Relative path based on the current schema path.
  - ../path/schema_3.yml as alias_3 # Relative path based on the current schema path. Go up one level.


csv: # How to parse file before validation
  inherit: alias_1                  # Inherited from another schema. Options above will overwrite inherited options.
  strict_column_order: true         # true - columns must be in the same order as in the schema, false - no strict
  other_columns_possible: true      # true - other columns are allowed, false - no other columns


columns:
  - name: General available options # Can be optional if csv\header: false. If set, then header must contain this value
    required: true                  # If true, then column must be present in the file
    rules:
      is_ip6: true                  # Check if the value is a valid IPv6 address. Example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334
      dateperiod_: true
      dateinterval_: true
      bic: true
      iban: true
      card_number: true
      country_code: true
      currency_code: true
      is_positive: true
      is_negative: true
      is_zero: true
      is_even: true
      is_odd: true
      is_prime: true
      is_time: true
      is_timezone: true
      is_timezone_offset: true
      not_allow_values: [ ]           # Strict set of values that are not allowed
    aggregate_rules:
      mode_: true
      variance_: true
      stddev_: true
      percentile_: true
      quantile_: true
      count_distinct_: true
      count_empty_: true
      count_not_empty_: true
      count_null_: true
      count_not_null_: true
      count_zero_: true
      count_positive_: true
      count_negative_: true
      count_even_: true
      count_odd_: true
      count_prime_: true
      sorted: asc                   # asc, desc, none
      sorted_flag: SORT_NATURAL     # See sort flags: https://www.php.net/manual/en/function.sort.php
      count_min: 1
      count_max: 10
      count_empty_min: 1
      count_empty_max: 10
      count_filled_min: 1
      count_filled_max: 10
      custom_func: callbak function
      custom_1: # Custom rule name. Format: custom_{name}
        class: My\Aggregate\Rules1 # Full name of PHP Class (with namespace)
        args: [ value ]   # Optional arguments to customize the rule
      custom_2:
        class: My\Aggregate\Rules2
        args: [ value1, value2 ]
      custom_my_favorite_name:
        class: My\Aggregate\RulesXXX

  - name: Some Integer
    aggregate_rules:
      first_value: 1
      second_value: 2
      last_value: 10

      stddev_: 1
      std_dev_max: 10
      percentile_min: 1
      percentile_max: 10
      average_min: 1
      average_max: 10
      median_min: 1
      median_max: 10
      mode_min: 1
      mode_max: 10
      sum_min: 1
      sum_max: 10
      moving_average_min: 1
      moving_average_max: 10
      geometric_mean_min: 1
      geometric_mean_max: 10
      harmonic_mean_min: 1
      harmonic_mean_max: 10
      root_mean_square_min: 1
      root_mean_square_max: 10


  - name: Some Enum
    rules:
      multiple: true
      multiple_separator: "|"         # Separator for multiple values
      allow_values: [ value1, value2, value3 ]

  - name: Some Inherited
    inherit: alias_1\Column Name    # Inherited from another schema
    rules: # Overwrite rules from another schema
      true_values: [ true, 1, yes ]

  - name: Some URL
    type: url                       # Inherited from Validator\String
    rules:
      scheme: https                 # Can be set of schemes [http, https, ftp]
      host: example.com             # Can be regex
      path: /some/path              # Can be regex
      query: p1=val1&p2=val2        # Can be regex
      fragment: some-fragment       # Can be regex
      port: 443                     # Can be set of ports [80, 443, 8080]
      username: user                # Can be regex
      password: password            # Can be regex

  - name: Some Email
    type: email                     # Inherited from Validator\String
    rules:
      domain: example.com           # Can be regex
      user: user                    # Can be regex

  - name: Some IP
    type: ip                        # Inherited from Validator\String
    rules:
      subnets: [ 192.168.1.2/24 ]   # If not set, then no subnet check

complex_rules:
  - handler: My\Complex\Rule        # Full name of PHP Class (with namespace)
    handler_args:
      - column:0
      - column:1

  - handler: My\Complex\Rule        # Full name of PHP Class (with namespace)
    handler_args:
      - Some String
      - Some Integer
