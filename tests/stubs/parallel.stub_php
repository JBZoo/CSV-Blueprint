<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension parallel@1.2.1

namespace parallel {
final class Channel implements \Stringable {

    // constants
    const Infinite = -1;

    // methods
    public function __construct(int $capacity = unknown) {}
    public static function make(string $name, int $capacity = unknown) : \parallel\Channel {}
    public static function open(string $name) : \parallel\Channel {}
    public function send($value) : void {}
    public function recv() {}
    public function close() : void {}
    public function __toString() : string {}
}

class Error extends \Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

final class Events implements \Countable {

    // methods
    public function setInput(\parallel\Events\Input $input) : void {}
    public function addChannel(\parallel\Channel $channel) : void {}
    public function addFuture(string $name, \parallel\Future $future) : void {}
    public function remove(string $target) : void {}
    public function setBlocking(bool $blocking) : void {}
    public function setTimeout(int $timeout) : void {}
    public function poll() : ?\parallel\Events\Event {}
    public function count() : int {}
}

final class Future {

    // methods
    public function __construct() {}
    public function value() {}
    public function done() : bool {}
    public function cancel() : bool {}
    public function cancelled() : bool {}
}

final class Runtime {

    // methods
    public function __construct(string $bootstrap = unknown) {}
    public function run(\Closure $task, array $argv = unknown) : ?\parallel\Future {}
    public function close() : void {}
    public function kill() : void {}
}

final class Sync {

    // methods
    public function __construct($value = null) {}
    public function set($value) {}
    public function get() {}
    public function wait() : bool {}
    public function notify(bool $all = unknown) : bool {}
    public function __invoke(callable $block) {}
}

function bootstrap(string $file) {}
function count() : int {}
function run(\Closure $task, array $argv = unknown) : ?\parallel\Future {}
}

namespace parallel\Runtime {
class Error extends \parallel\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

}

namespace parallel\Runtime\Error {
class Bootstrap extends \parallel\Runtime\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class Closed extends \parallel\Runtime\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class IllegalFunction extends \parallel\Runtime\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class IllegalInstruction extends \parallel\Runtime\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class IllegalParameter extends \parallel\Runtime\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class IllegalReturn extends \parallel\Runtime\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class IllegalVariable extends \parallel\Runtime\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class Killed extends \parallel\Runtime\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

}

namespace parallel\Future {
class Error extends \parallel\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

}

namespace parallel\Future\Error {
class Cancelled extends \parallel\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class Foreign extends \parallel\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class Killed extends \parallel\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

}

namespace parallel\Channel {
class Error extends \parallel\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

}

namespace parallel\Channel\Error {
class Closed extends \parallel\Channel\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class Existence extends \parallel\Channel\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class IllegalValue extends \parallel\Channel\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

}

namespace parallel\Sync {
class Error extends \parallel\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

}

namespace parallel\Sync\Error {
class IllegalValue extends \parallel\Sync\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

}

namespace parallel\Events {
class Error extends \parallel\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

final class Event {

    // properties
    public $type;
    public $source;
    public $object;
    public $value;

    // methods
    public function __construct() {}
}

final class Input {

    // methods
    public function add(string $target, $value) : void {}
    public function remove(string $target) : void {}
    public function clear() : void {}
}

}

namespace parallel\Events\Error {
class Existence extends \parallel\Events\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class Timeout extends \parallel\Events\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

}

namespace parallel\Events\Input {
class Error extends \parallel\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

}

namespace parallel\Events\Input\Error {
class Existence extends \parallel\Events\Input\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class IllegalValue extends \parallel\Events\Input\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

}

namespace parallel\Events\Event {
class Error extends \parallel\Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

final class Type {

    // constants
    const Read = 1;
    const Write = 2;
    const Close = 3;
    const Cancel = 5;
    const Kill = 6;
    const Error = 4;
}

}

namespace parallel\Runtime\Type {
class Unavailable {
}

}

namespace parallel\Runtime\Object {
class Unavailable {
}

}
