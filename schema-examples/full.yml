#
# JBZoo Toolbox - Csv-Blueprint.
#
# This file is part of the JBZoo Toolbox project.
# For the full copyright and license information, please view the LICENSE
# file that was distributed with this source code.
#
# @license    MIT
# @copyright  Copyright (C) JBZoo.com, All rights reserved.
# @see        https://github.com/JBZoo/Csv-Blueprint
#

# It's a full example of the CSV schema file in YAML format.

# Regular expression to match the file name. If not set, then no pattern check
# This way you can validate the file name before the validation process.
# Feel free to check parent directories as well.
# See https://www.php.net/manual/en/reference.pcre.pattern.syntax.php
filename_pattern: /demo(-\d+)?\.csv$/i

csv: # Here are default values. You can skip this section if you don't need to override the default values
  header: true                          # If the first row is a header. If true, name of each column is required.
  delimiter: ,                          # Delimiter character in CSV file.
  quote_char: \                         # Quote character in CSV file.
  enclosure: "\""                       # Enclosure for each field in CSV file.
  encoding: utf-8                       # (Experimental) Only utf-8, utf-16, utf-32.
  bom: false                            # (Experimental) If the file has a BOM (Byte Order Mark) at the beginning.

columns:
  - name: "Column Name (header)"        # Any custom name of the column in the CSV file (first row). Required if "csv_structure.header" is true.
    description: "Lorem ipsum"          # Optional. Description of the column. Not used in the validation process.

    # Important notes about the validation rules.
    # 1. All rules except "not_empty" ignored for empty strings (length 0).
    #    If the value must be non-empty, use "not_empty" as extra rule!
    # 2. All rules don't depend on each other. They are independent.
    #    They know nothing about each other and cannot influence each other.
    # 3. You can use the rules in any combination. Or not use any of them.
    #    They are grouped below simply for ease of navigation and reading.
    # 4. If you see the value for the rule is "true" - that's just an enable flag.
    #    In other cases, these are rule parameters.
    # 5. The order of rules execution is the same as in the scheme. But it doesn't matter.
    #    The result will be the same in any order.
    # 6. Most of the rules are case-sensitive. Unless otherwise specified.
    # 7. As backup plan, you always can use the "regex" rule.

    ####################################################################################################################
    # Data validation for each(!) value in the column.
    # Of course, this can greatly affect the speed of checking.
    # It depends on the number of checks and CSV file size.
    # TODO: There are several ways to optimize this process, but the author needs time to test it carefully.
    rules:
      # General rules
      not_empty: true                   # Value is not an empty string. Actually checks if the string length is not 0.
      exact_value: Some string          # Exact value for string in the column.
      allow_values: [ y, n, "" ]        # Strict set of values that are allowed.
      not_allow_values: [ invalid ]     # Strict set of values that are NOT allowed.

      # Any valid regex pattern. See https://www.php.net/manual/en/reference.pcre.pattern.syntax.php.
      # Of course it's an ultimatum to verify any sort of string data.
      # Please, be careful. Regex is a powerful tool, but it can be very dangerous if used incorrectly.
      # Remember that if you want to solve a problem with regex, you now have two problems.
      regex: /^[\d]{2}$/

      # Checks length of a string including spaces (multibyte safe).
      length: 5
      length_not: 4
      length_min: 1
      length_max: 10

      # Basic string checks
      is_trimmed: true                  # Only trimed strings. Example: "Hello World" (not " Hello World ").
      is_lowercase: true                # String is only lower-case. Example: "hello world".
      is_uppercase: true                # String is only upper-case. Example: "HELLO WORLD".
      is_capitalize: true               # String is only capitalized. Example: "Hello World".

      # Count number of words used in a string.
      # Note that multibyte locales are not supported.
      # Example: "Hello World, 123" - 2 words only (123 is not a word).
      word_count: 5
      word_count_not: 4
      word_count_min: 1
      word_count_max: 10

      # Contains rules
      contains: Hello                   # Example: "Hello World".
      contains_one: [ a, b ]            # At least one of the string must be in the CSV value.
      contains_all: [ a, b, c ]         # All the strings must be part of a CSV value.
      starts_with: "prefix "            # Example: "prefix Hello World".
      ends_with: " suffix"              # Example: "Hello World suffix".

      # Under the hood it convertes and compares as float values.
      # Comparison accuracy is 10 digits after a dot.
      # Scientific number format is also supported. Example: "1.2e3".
      num: 5                            # You can use integers.
      num_not: 4.123                    # Float numbers.
      num_min: 1.2e3                    # And even scientific format.
      num_max: -10.123                  # Negative and positive, zero is also supported.
      is_int: true                      # Check format only. Can be negative and positive. Without any separators.
      is_float: true                    # Check format only. Can be negative and positive. Dot as decimal separator.

      # Number of digits after the decimal point (with zeros).
      precision: 5
      precision_not: 4
      precision_min: 1
      precision_max: 10

      # Dates. Under the hood, the strings are converted to timestamp and compared.
      # This gives you the ability to use relative dates and any formatting you want.
      # By default, it works in UTC. But you can specify your own timezone as part of the date string.
      # Format:    https://www.php.net/manual/en/datetime.format.php.
      # Parsing:   https://www.php.net/manual/en/function.strtotime.php.
      # Timezones: https://www.php.net/manual/en/timezones.php.
      date: 01 Jan 2000                 # You can use any string that can be parsed by the strtotime function.
      date_not: 2006-01-02 15:04:05 -0700 Europe/Rome
      date_min: +1 day                  # Examples of relative formats.
      date_max: now                     # Examples of current date and time.
      date_format: Y-m-d                # Check strict format of the date.
      is_date: true                     # Accepts arbitrary date format. Is shows error if failed to convert to timestamp.

      # Specific formats
      is_bool: true                     # Allow only boolean values "true" and "false", case-insensitive.
      is_ip4: true                      # Only IPv4. Example: "127.0.0.1".
      is_url: true                      # Only URL format. Example: "https://example.com/page?query=string#anchor".
      is_email: true                    # Only email format. Example: "user@example.com".
      is_domain: true                   # Only domain name. Example: "example.com".
      is_uuid: true                     # Validates whether the input is a valid UUID. It also supports validation of specific versions 1, 3, 4 and 5.
      is_alias: true                    # Only alias format. Example: "my-alias-123". It can contain letters, numbers, and dashes.
      is_currency_code: true            # Validates an ISO 4217 currency code like GBP or EUR. Case-sensitive. See: https://en.wikipedia.org/wiki/ISO_4217.
      is_base64: true                   # Validate if a string is Base64-encoded. Example: "cmVzcGVjdCE=".

      # Validates if the given input is a valid JSON.
      # This is possible if you escape all special characters correctly and use a special CSV format.
      is_json: true                     # Example: {"foo":"bar"}.

      # Geography
      is_latitude: true                 # Can be integer or float. Example: 50.123456.
      is_longitude: true                # Can be integer or float. Example: -89.123456.
      is_geohash: true                  # Check if the value is a valid geohash. Example: "u4pruydqqvj".
      is_cardinal_direction: true       # Valid cardinal direction. Examples: "N", "S", "NE", "SE", "none", "".
      is_usa_market_name: true          # Check if the value is a valid USA market name. Example: "New York, NY".

      # Validates whether the input is a country code in ISO 3166-1 standard.
      # Available options: "alpha-2" (Ex: "US"), "alpha-3" (Ex: "USA"), "numeric" (Ex: "840").
      # The rule uses data from iso-codes: https://salsa.debian.org/iso-codes-team/iso-codes.
      country_code: alpha-2             # Country code in ISO 3166-1 standard. Examples: "US", "USA", "840".

      # Validates whether the input is language code based on ISO 639.
      # Available options: "alpha-2" (Ex: "en"), "alpha-3" (Ex: "eng").
      # See: https://en.wikipedia.org/wiki/ISO_639.
      language_code: alpha-2            # Examples: "en", "eng".


    ####################################################################################################################
    # Data validation for the entire(!) column using different data aggregation methods.
    # Depending on the file size and the chosen aggregation method - this can use a lot of RAM time.
    # Be careful with files that are 2-3 or more times larger than the available memory.
    # TODO: There are several ways to optimize this process, but the author needs time to test it carefully.
    aggregate_rules:
      is_unique: true                   # All values in the column are unique.

      # Sum of the numbers in the column. Example: [1, 2, 3] => 6.
      sum: 5.123
      sum_not: 4.123
      sum_min: 1.123
      sum_max: 10.123

      # Regular the arithmetic mean. The sum of the numbers divided by the count.
      average: 5.123
      average_not: 4.123
      average_min: 1.123
      average_max: 10.123

      # Total number of rows in the CSV file.
      # Since any(!) values are taken into account, it only makes sense to use these rules once in any column.
      count: 5
      count_not: 4
      count_min: 1
      count_max: 10

      # Counts only empty values (string length is 0).
      count_empty: 5
      count_empty_not: 4
      count_empty_min: 1
      count_empty_max: 10

      # Counts only not empty values (string length is not 0).
      count_not_empty: 5
      count_not_empty_not: 4
      count_not_empty_min: 1
      count_not_empty_max: 10

      # Calculate the median average of a list of numbers.
      median: 5.123
      median_not: 4.123
      median_min: 1.123
      median_max: 10.123

      # Population variance - Use when all possible observations of the system are present.
      # If used with a subset of data (sample variance), it will be a biased variance.
      # It's n degrees of freedom.
      population_variance: 5.123
      population_variance_not: 4.123
      population_variance_min: 1.123
      population_variance_max: 10.123

  - name: "another_column"

  - name: "third_column"

  - description: "Column with description only. Undefined header name."
